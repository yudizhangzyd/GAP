// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_overlap
List get_overlap(Nullable<List> del_, Nullable<List> coverage_, Nullable<List> hmm_, Nullable<IntegerVector> pos_possi_, int hap_min_pos);
RcppExport SEXP _GAP_get_overlap(SEXP del_SEXP, SEXP coverage_SEXP, SEXP hmm_SEXP, SEXP pos_possi_SEXP, SEXP hap_min_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<List> >::type del_(del_SEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type coverage_(coverage_SEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type hmm_(hmm_SEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type pos_possi_(pos_possi_SEXP);
    Rcpp::traits::input_parameter< int >::type hap_min_pos(hap_min_posSEXP);
    rcpp_result_gen = Rcpp::wrap(get_overlap(del_, coverage_, hmm_, pos_possi_, hap_min_pos));
    return rcpp_result_gen;
END_RCPP
}
// full_hap_new
List full_hap_new(List hmm_info, IntegerMatrix linkage_info, List overlap_info, unsigned int hap_length, int hap_min_pos, unsigned int use_MC, unsigned int db_heter);
RcppExport SEXP _GAP_full_hap_new(SEXP hmm_infoSEXP, SEXP linkage_infoSEXP, SEXP overlap_infoSEXP, SEXP hap_lengthSEXP, SEXP hap_min_posSEXP, SEXP use_MCSEXP, SEXP db_heterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type linkage_info(linkage_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type hap_length(hap_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type hap_min_pos(hap_min_posSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type use_MC(use_MCSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type db_heter(db_heterSEXP);
    rcpp_result_gen = Rcpp::wrap(full_hap_new(hmm_info, linkage_info, overlap_info, hap_length, hap_min_pos, use_MC, db_heter));
    return rcpp_result_gen;
END_RCPP
}
// reads_llk
List reads_llk(List hmm_info, List dat_info, List hap_info, NumericMatrix beta, NumericVector eta, int PD_LENGTH, IntegerVector chosed_state);
RcppExport SEXP _GAP_reads_llk(SEXP hmm_infoSEXP, SEXP dat_infoSEXP, SEXP hap_infoSEXP, SEXP betaSEXP, SEXP etaSEXP, SEXP PD_LENGTHSEXP, SEXP chosed_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< List >::type hap_info(hap_infoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type PD_LENGTH(PD_LENGTHSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chosed_state(chosed_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(reads_llk(hmm_info, dat_info, hap_info, beta, eta, PD_LENGTH, chosed_state));
    return rcpp_result_gen;
END_RCPP
}
// format_data2
List format_data2(List hmm_info, List d_info, List hap_info);
RcppExport SEXP _GAP_format_data2(SEXP hmm_infoSEXP, SEXP d_infoSEXP, SEXP hap_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type d_info(d_infoSEXP);
    Rcpp::traits::input_parameter< List >::type hap_info(hap_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(format_data2(hmm_info, d_info, hap_info));
    return rcpp_result_gen;
END_RCPP
}
// baum_welch_init
List baum_welch_init(List hmm_info, List data_info, List hap_info, int PD_LENGTH, List par, List trans_indicator, List hash_idx, List trans_constraint, int db, double penality);
RcppExport SEXP _GAP_baum_welch_init(SEXP hmm_infoSEXP, SEXP data_infoSEXP, SEXP hap_infoSEXP, SEXP PD_LENGTHSEXP, SEXP parSEXP, SEXP trans_indicatorSEXP, SEXP hash_idxSEXP, SEXP trans_constraintSEXP, SEXP dbSEXP, SEXP penalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type data_info(data_infoSEXP);
    Rcpp::traits::input_parameter< List >::type hap_info(hap_infoSEXP);
    Rcpp::traits::input_parameter< int >::type PD_LENGTH(PD_LENGTHSEXP);
    Rcpp::traits::input_parameter< List >::type par(parSEXP);
    Rcpp::traits::input_parameter< List >::type trans_indicator(trans_indicatorSEXP);
    Rcpp::traits::input_parameter< List >::type hash_idx(hash_idxSEXP);
    Rcpp::traits::input_parameter< List >::type trans_constraint(trans_constraintSEXP);
    Rcpp::traits::input_parameter< int >::type db(dbSEXP);
    Rcpp::traits::input_parameter< double >::type penality(penalitySEXP);
    rcpp_result_gen = Rcpp::wrap(baum_welch_init(hmm_info, data_info, hap_info, PD_LENGTH, par, trans_indicator, hash_idx, trans_constraint, db, penality));
    return rcpp_result_gen;
END_RCPP
}
// baum_welch_iter
List baum_welch_iter(List hmm_info, List par_hmm, List data_info, List hap_info, NumericMatrix beta, int PD_LENGTH, List hash_idx, int no_emi_upt);
RcppExport SEXP _GAP_baum_welch_iter(SEXP hmm_infoSEXP, SEXP par_hmmSEXP, SEXP data_infoSEXP, SEXP hap_infoSEXP, SEXP betaSEXP, SEXP PD_LENGTHSEXP, SEXP hash_idxSEXP, SEXP no_emi_uptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type par_hmm(par_hmmSEXP);
    Rcpp::traits::input_parameter< List >::type data_info(data_infoSEXP);
    Rcpp::traits::input_parameter< List >::type hap_info(hap_infoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type PD_LENGTH(PD_LENGTHSEXP);
    Rcpp::traits::input_parameter< List >::type hash_idx(hash_idxSEXP);
    Rcpp::traits::input_parameter< int >::type no_emi_upt(no_emi_uptSEXP);
    rcpp_result_gen = Rcpp::wrap(baum_welch_iter(hmm_info, par_hmm, data_info, hap_info, beta, PD_LENGTH, hash_idx, no_emi_upt));
    return rcpp_result_gen;
END_RCPP
}
// trans_permit
List trans_permit(IntegerVector num_states, List overlap_info, List combination, int t_max);
RcppExport SEXP _GAP_trans_permit(SEXP num_statesSEXP, SEXP overlap_infoSEXP, SEXP combinationSEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type num_states(num_statesSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type combination(combinationSEXP);
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(trans_permit(num_states, overlap_info, combination, t_max));
    return rcpp_result_gen;
END_RCPP
}
// trans_const
List trans_const(List overlap_info, List combination, IntegerVector db_sites, IntegerVector num_states, int t_max);
RcppExport SEXP _GAP_trans_const(SEXP overlap_infoSEXP, SEXP combinationSEXP, SEXP db_sitesSEXP, SEXP num_statesSEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type combination(combinationSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type db_sites(db_sitesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type num_states(num_statesSEXP);
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(trans_const(overlap_info, combination, db_sites, num_states, t_max));
    return rcpp_result_gen;
END_RCPP
}
// find_deleted
List find_deleted(List hmm_info, List overlap_info);
RcppExport SEXP _GAP_find_deleted(SEXP hmm_infoSEXP, SEXP overlap_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(find_deleted(hmm_info, overlap_info));
    return rcpp_result_gen;
END_RCPP
}
// merge_no_connection
List merge_no_connection(List hmm_info, List overlap_info, List full_hap);
RcppExport SEXP _GAP_merge_no_connection(SEXP hmm_infoSEXP, SEXP overlap_infoSEXP, SEXP full_hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type full_hap(full_hapSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_no_connection(hmm_info, overlap_info, full_hap));
    return rcpp_result_gen;
END_RCPP
}
// merge_states
List merge_states(List hmm_info, List overlap_info, List full_hap);
RcppExport SEXP _GAP_merge_states(SEXP hmm_infoSEXP, SEXP overlap_infoSEXP, SEXP full_hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type full_hap(full_hapSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_states(hmm_info, overlap_info, full_hap));
    return rcpp_result_gen;
END_RCPP
}
// read_data
List read_data(std::string path, unsigned int old_v);
RcppExport SEXP _GAP_read_data(SEXP pathSEXP, SEXP old_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type old_v(old_vSEXP);
    rcpp_result_gen = Rcpp::wrap(read_data(path, old_v));
    return rcpp_result_gen;
END_RCPP
}
// format_data
DataFrame format_data(List dat_info, IntegerMatrix haplotype, int time_pos);
RcppExport SEXP _GAP_format_data(SEXP dat_infoSEXP, SEXP haplotypeSEXP, SEXP time_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type haplotype(haplotypeSEXP);
    Rcpp::traits::input_parameter< int >::type time_pos(time_posSEXP);
    rcpp_result_gen = Rcpp::wrap(format_data(dat_info, haplotype, time_pos));
    return rcpp_result_gen;
END_RCPP
}
// to_char
CharacterVector to_char(IntegerVector nuc);
RcppExport SEXP _GAP_to_char(SEXP nucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type nuc(nucSEXP);
    rcpp_result_gen = Rcpp::wrap(to_char(nuc));
    return rcpp_result_gen;
END_RCPP
}
// hmm_info
List hmm_info(List dat_info, CharacterVector uni_alignment, List opt, unsigned int sbs);
RcppExport SEXP _GAP_hmm_info(SEXP dat_infoSEXP, SEXP uni_alignmentSEXP, SEXP optSEXP, SEXP sbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type uni_alignment(uni_alignmentSEXP);
    Rcpp::traits::input_parameter< List >::type opt(optSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sbs(sbsSEXP);
    rcpp_result_gen = Rcpp::wrap(hmm_info(dat_info, uni_alignment, opt, sbs));
    return rcpp_result_gen;
END_RCPP
}
// get_hidden_state
List get_hidden_state(List hmm_info, List dat_info, CharacterVector uni_alignment, List opt);
RcppExport SEXP _GAP_get_hidden_state(SEXP hmm_infoSEXP, SEXP dat_infoSEXP, SEXP uni_alignmentSEXP, SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type uni_alignment(uni_alignmentSEXP);
    Rcpp::traits::input_parameter< List >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(get_hidden_state(hmm_info, dat_info, uni_alignment, opt));
    return rcpp_result_gen;
END_RCPP
}
// linkage_info
List linkage_info(List dat_info, IntegerVector undecided_pos, CharacterVector uni_alignment, List nuc_count, List nuc_unique);
RcppExport SEXP _GAP_linkage_info(SEXP dat_infoSEXP, SEXP undecided_posSEXP, SEXP uni_alignmentSEXP, SEXP nuc_countSEXP, SEXP nuc_uniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type undecided_pos(undecided_posSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type uni_alignment(uni_alignmentSEXP);
    Rcpp::traits::input_parameter< List >::type nuc_count(nuc_countSEXP);
    Rcpp::traits::input_parameter< List >::type nuc_unique(nuc_uniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(linkage_info(dat_info, undecided_pos, uni_alignment, nuc_count, nuc_unique));
    return rcpp_result_gen;
END_RCPP
}
// sample_hap
List sample_hap(List dat_info, IntegerVector start, IntegerVector idx, IntegerVector hap_deletion_len);
RcppExport SEXP _GAP_sample_hap(SEXP dat_infoSEXP, SEXP startSEXP, SEXP idxSEXP, SEXP hap_deletion_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type hap_deletion_len(hap_deletion_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_hap(dat_info, start, idx, hap_deletion_len));
    return rcpp_result_gen;
END_RCPP
}
// sample_hap2
List sample_hap2(List hmm_info, unsigned int hap_length, int hap_min_pos);
RcppExport SEXP _GAP_sample_hap2(SEXP hmm_infoSEXP, SEXP hap_lengthSEXP, SEXP hap_min_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type hap_length(hap_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type hap_min_pos(hap_min_posSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_hap2(hmm_info, hap_length, hap_min_pos));
    return rcpp_result_gen;
END_RCPP
}
// sort_ind
NumericVector sort_ind(CharacterVector input, int n);
RcppExport SEXP _GAP_sort_ind(SEXP inputSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_ind(input, n));
    return rcpp_result_gen;
END_RCPP
}
// formDesignMat_c
NumericMatrix formDesignMat_c(DataFrame dat, int N, int PD_LENGTH);
RcppExport SEXP _GAP_formDesignMat_c(SEXP datSEXP, SEXP NSEXP, SEXP PD_LENGTHSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type PD_LENGTH(PD_LENGTHSEXP);
    rcpp_result_gen = Rcpp::wrap(formDesignMat_c(dat, N, PD_LENGTH));
    return rcpp_result_gen;
END_RCPP
}
// determine_hidden
List determine_hidden(List overlap_info, IntegerMatrix link_in, List opt, List hmm_info, CharacterVector uni_alignment, int hap_min_pos);
RcppExport SEXP _GAP_determine_hidden(SEXP overlap_infoSEXP, SEXP link_inSEXP, SEXP optSEXP, SEXP hmm_infoSEXP, SEXP uni_alignmentSEXP, SEXP hap_min_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type link_in(link_inSEXP);
    Rcpp::traits::input_parameter< List >::type opt(optSEXP);
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type uni_alignment(uni_alignmentSEXP);
    Rcpp::traits::input_parameter< int >::type hap_min_pos(hap_min_posSEXP);
    rcpp_result_gen = Rcpp::wrap(determine_hidden(overlap_info, link_in, opt, hmm_info, uni_alignment, hap_min_pos));
    return rcpp_result_gen;
END_RCPP
}
// full_hap_samp2
List full_hap_samp2(List hmm_info, List overlap_info, IntegerMatrix linkage, unsigned int hap_length, int hap_min_pos, double lower_ab);
RcppExport SEXP _GAP_full_hap_samp2(SEXP hmm_infoSEXP, SEXP overlap_infoSEXP, SEXP linkageSEXP, SEXP hap_lengthSEXP, SEXP hap_min_posSEXP, SEXP lower_abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type linkage(linkageSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type hap_length(hap_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type hap_min_pos(hap_min_posSEXP);
    Rcpp::traits::input_parameter< double >::type lower_ab(lower_abSEXP);
    rcpp_result_gen = Rcpp::wrap(full_hap_samp2(hmm_info, overlap_info, linkage, hap_length, hap_min_pos, lower_ab));
    return rcpp_result_gen;
END_RCPP
}
// viterbi
List viterbi(List hmm_info, List dat_info, List hap_info, List overlap_info, List par_hmm, Nullable<List> left_);
RcppExport SEXP _GAP_viterbi(SEXP hmm_infoSEXP, SEXP dat_infoSEXP, SEXP hap_infoSEXP, SEXP overlap_infoSEXP, SEXP par_hmmSEXP, SEXP left_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< List >::type hap_info(hap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type par_hmm(par_hmmSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type left_(left_SEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi(hmm_info, dat_info, hap_info, overlap_info, par_hmm, left_));
    return rcpp_result_gen;
END_RCPP
}
// connect_hap
IntegerMatrix connect_hap(List hmm_info, List dat_info, List hap_info, List overlap_info);
RcppExport SEXP _GAP_connect_hap(SEXP hmm_infoSEXP, SEXP dat_infoSEXP, SEXP hap_infoSEXP, SEXP overlap_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmm_info(hmm_infoSEXP);
    Rcpp::traits::input_parameter< List >::type dat_info(dat_infoSEXP);
    Rcpp::traits::input_parameter< List >::type hap_info(hap_infoSEXP);
    Rcpp::traits::input_parameter< List >::type overlap_info(overlap_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(connect_hap(hmm_info, dat_info, hap_info, overlap_info));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP computeHessianDotCall(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP r_make_aln(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP r_read_fasta(SEXP);
RcppExport SEXP r_read_fastq(SEXP);
RcppExport SEXP r_read_sam(SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_GAP_get_overlap", (DL_FUNC) &_GAP_get_overlap, 5},
    {"_GAP_full_hap_new", (DL_FUNC) &_GAP_full_hap_new, 7},
    {"_GAP_reads_llk", (DL_FUNC) &_GAP_reads_llk, 7},
    {"_GAP_format_data2", (DL_FUNC) &_GAP_format_data2, 3},
    {"_GAP_baum_welch_init", (DL_FUNC) &_GAP_baum_welch_init, 10},
    {"_GAP_baum_welch_iter", (DL_FUNC) &_GAP_baum_welch_iter, 8},
    {"_GAP_trans_permit", (DL_FUNC) &_GAP_trans_permit, 4},
    {"_GAP_trans_const", (DL_FUNC) &_GAP_trans_const, 5},
    {"_GAP_find_deleted", (DL_FUNC) &_GAP_find_deleted, 2},
    {"_GAP_merge_no_connection", (DL_FUNC) &_GAP_merge_no_connection, 3},
    {"_GAP_merge_states", (DL_FUNC) &_GAP_merge_states, 3},
    {"_GAP_read_data", (DL_FUNC) &_GAP_read_data, 2},
    {"_GAP_format_data", (DL_FUNC) &_GAP_format_data, 3},
    {"_GAP_to_char", (DL_FUNC) &_GAP_to_char, 1},
    {"_GAP_hmm_info", (DL_FUNC) &_GAP_hmm_info, 4},
    {"_GAP_get_hidden_state", (DL_FUNC) &_GAP_get_hidden_state, 4},
    {"_GAP_linkage_info", (DL_FUNC) &_GAP_linkage_info, 5},
    {"_GAP_sample_hap", (DL_FUNC) &_GAP_sample_hap, 4},
    {"_GAP_sample_hap2", (DL_FUNC) &_GAP_sample_hap2, 3},
    {"_GAP_sort_ind", (DL_FUNC) &_GAP_sort_ind, 2},
    {"_GAP_formDesignMat_c", (DL_FUNC) &_GAP_formDesignMat_c, 3},
    {"_GAP_determine_hidden", (DL_FUNC) &_GAP_determine_hidden, 6},
    {"_GAP_full_hap_samp2", (DL_FUNC) &_GAP_full_hap_samp2, 6},
    {"_GAP_viterbi", (DL_FUNC) &_GAP_viterbi, 6},
    {"_GAP_connect_hap", (DL_FUNC) &_GAP_connect_hap, 4},
    {"computeHessianDotCall", (DL_FUNC) &computeHessianDotCall, 13},
    {"r_make_aln",            (DL_FUNC) &r_make_aln,             8},
    {"r_read_fasta",          (DL_FUNC) &r_read_fasta,           1},
    {"r_read_fastq",          (DL_FUNC) &r_read_fastq,           1},
    {"r_read_sam",            (DL_FUNC) &r_read_sam,             4},
    {NULL, NULL, 0}
};

RcppExport void R_init_GAP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
